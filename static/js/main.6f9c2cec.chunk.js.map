{"version":3,"sources":["components/Container.js","components/Card.js","helper/apiUtils.js","redux/actions/index.js","components/Header.js","pages/ListPage.js","App.js","serviceWorker.js","redux/reducers/reducerGetListData.js","redux/reducers/index.js","index.js"],"names":["Container","props","className","children","Card","React","memo","src","data","alt","onError","event","target","axios","require","getData","url","get","then","response","catch","error","getListData","dispatch","a","listData","page","type","searchData","keywords","searchStatus","status","connect","ownProps","bindActionCreators","useState","search","setSearch","id","placeholder","onChange","value","minLength","debounceTimeout","onClick","ListPage","fetchMoreData","state","setState","prevState","content","this","contentData","message","searchList","length","hasMore","parseInt","totalItems","dataLength","next","loader","map","element","index","key","Component","Object","assign","App","Boolean","window","location","hostname","match","INITIAL_STATE","currentPage","pageSizeRequested","pageSizeReturned","searchString","action","actionData","concat","filter","val","name","toLowerCase","includes","combineReducers","loggerMiddleware","createLogger","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6f9c2cec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Container = (props) => {\r\n    return (\r\n        <div className=\"container justify-center bg-gray-900 max-w-full p-15px pt-16 min-h-screen\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;\r\n\r\n","import React from 'react';\r\n\r\n/* using react memo to memorising the result */\r\nconst Card = React.memo((props) => {\r\n   return (\r\n      <div className=\"w-full xs:w-1/3 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 p-15px \">\r\n         <div className=\"max-w-sm overflow-hidden hover:shadow-lg\">\r\n            <img className=\"w-full\" src={`/images/${props.data['poster-image']}`} alt=\"Cards\"\r\n               onError={(event) => {\r\n                  event.target.src = \"/images/loading.jpg\"\r\n               }} />\r\n            <div>\r\n               <p className=\"text-white text-base bg-transparent font-titillium font-thin truncate\">\r\n                  {props.data['name']}\r\n               </p>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n})\r\n\r\nexport default Card;\r\n\r\n","const axios = require('axios');\r\n\r\nexport const getData = (url) => {\r\n    return axios.get(url)\r\n        .then(function (response) {\r\n            return response.data\r\n        })\r\n        .catch(function (error) {\r\n            return { error };\r\n        })\r\n}","import {getData} from './../../helper/apiUtils';\r\n\r\nexport const getListData = (url) => {\r\n    return async dispatch => {\r\n        let listData = await getData(`/API/${url}`)\r\n        if(listData && listData.page){\r\n            dispatch({ type: 'GET_LIST_DATA',data: listData.page})\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const searchData = (keywords) => {\r\n    return async dispatch => {\r\n            dispatch({ type: 'SEARCH_DATA', keywords})\r\n    }    \r\n}\r\n\r\nexport const searchStatus = (status) => {\r\n    return async dispatch => {\r\n            dispatch({ type: 'SEARCH_STATUS', status})\r\n    }    \r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState, Fragment } from 'react';\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { searchData, searchStatus } from './../redux/actions/';\r\n\r\nconst Header = (props) => {\r\n   const [search, setSearch] = useState(false);\r\n\r\n   const openSearch = () => {\r\n      props.searchStatus(true);\r\n      setSearch(true);\r\n   }\r\n   const closeSearch = () => {\r\n      props.searchStatus(false);\r\n      setSearch(false);\r\n   }\r\n   const handleOnchange = (event)=>{\r\n      props.searchData(event.target.value)\r\n   }\r\n\r\n   return (\r\n      <nav className=\"flex items-center justify-between flex-wrap w-full bg-black p-3 fixed shadow-header pb-0\">\r\n         <div className=\"w-full block flex-grow flex items-center w-auto\">\r\n           \r\n               <Fragment>\r\n                  <div className=\"text-sm flex-grow flex\">\r\n                     <span className=\"inline-block mt-0 text-teal-200 hover:text-white mr-4\">\r\n                        <img className=\"w-5\" src=\"/images/back.png\" alt=\"Back button\" />\r\n                     </span>\r\n                     <span className=\"inline-block mt-0 text-teal-200 hover:text-white mr-4 font-titillium text-lg truncate\">\r\n                        Romantic comedy\r\n                     </span>\r\n                  </div>\r\n                  {search ?\r\n                  <div className=\"flex-grow flex\">\r\n                     <DebounceInput className=\"shadow appearance-none border rounded w-full py-1 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"username\" type=\"text\" placeholder=\"Search\" onChange={handleOnchange} minLength={1} debounceTimeout={300}/>\r\n                     <button onClick={closeSearch} className=\"bg-gray-900 hover:bg-blue-700 text-white font-bold py-0 px-2 ml-2 rounded\">X</button>\r\n                  </div> \r\n                  :\r\n                  <div className=\"w-5\" onClick={openSearch}>\r\n                     <img className=\"\" src=\"/images/search.png\" alt=\"Search\" />\r\n                  </div>}\r\n               </Fragment>\r\n            \r\n         </div>\r\n      </nav>\r\n   )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n   return {\r\n      searchData: bindActionCreators(searchData, dispatch),\r\n      searchStatus: bindActionCreators(searchStatus, dispatch)\r\n   }\r\n}\r\n\r\nexport default connect(\"\", mapDispatchToProps)(Header);\r\n\r\n","\r\nimport React from 'react';\r\nimport { Card } from './../components/';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getListData } from './../redux/actions/';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nclass ListPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: \"\",\r\n            page: 1\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.content !== state.content) {\r\n            return {\r\n                content: props.content,\r\n                searchStatus: props.searchStatus,\r\n                searchData: props.searchData\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    componentDidMount() {\r\n        this.fetchMoreData();\r\n    }\r\n\r\n    /* function used to loadmore data on scroll form the api*/\r\n    fetchMoreData = () => {\r\n        this.props.getListData(`CONTENTLISTINGPAGE-PAGE${this.state.page}.json`);\r\n        this.setState((prevState) => {\r\n            return {\r\n                page: prevState.page + 1\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {content, searchData, searchStatus} = this.state;\r\n        var contentData = \"\", message = \"Loading....\";\r\n        if(searchStatus){\r\n            message = \"No Data Found......!!!\";\r\n            contentData = searchData.searchList;\r\n        } else {\r\n            contentData = content && content.listData;\r\n        }\r\n        if (contentData && contentData.length) {\r\n            let hasMore = true;\r\n            \r\n            /*checking if maximum data length reached then do not load more*/\r\n            if ((content.listData.length >= parseInt(content.totalItems)) || searchStatus) {\r\n                hasMore = false;\r\n            }\r\n            return (\r\n                <InfiniteScroll\r\n                    dataLength={contentData.length}\r\n                    next={this.fetchMoreData}\r\n                    hasMore={hasMore}\r\n                    loader={<h4>Loading...</h4>}>\r\n                    <div className=\"flex flex-wrap\">\r\n                        {contentData.map((element, index) => (<Card key={index} data={element} />))}\r\n                    </div>\r\n                </InfiniteScroll>)\r\n        }\r\n        return (\r\n        <div className=\"text-white text-center p-10 font-bold\">{message}</div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { getListData } = state;\r\n    return {\r\n        content: Object.assign({}, getListData.content),\r\n        searchStatus:  getListData.searchStatus,\r\n        searchData: getListData.searchData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        getListData: bindActionCreators(getListData, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListPage);\r\n\r\n","import React from 'react';\nimport { Container, Header } from './components/';\nimport { ListPage } from './pages/';\n\nimport './styles/app.css'\n\nfunction App() {\n   return (\n      <div className=\"App\" >\n         <Header />\n         <Container>\n            <ListPage />\n         </Container>\n      </div>\n   );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {\r\n    content: {\r\n        listData: [],\r\n        totalItems: '',\r\n        currentPage: '',\r\n        pageSizeRequested: '',\r\n        pageSizeReturned: '',\r\n\r\n    },\r\n    searchData: {\r\n        searchString: \"\",\r\n        searchList: []\r\n    },\r\n    searchStatus: false,\r\n    \r\n}\r\n\r\nconst getListData = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'GET_LIST_DATA':\r\n            let actionData = action.data;\r\n            let content = state.content;\r\n\r\n            content.listData = state.content.listData.concat({ ...actionData['content-items'] }.content);\r\n            content.totalItems = actionData['total-content-items'];\r\n            content.currentPage = actionData['page-num-requested'];\r\n            content.pageSizeRequested = actionData['page-size-requested'];\r\n            content.pageSizeReturned = actionData['page-size-returned'];\r\n\r\n            return {\r\n                ...state,\r\n                content\r\n            }\r\n        case 'SEARCH_STATUS':\r\n            state.searchStatus = action.status;\r\n            action.status ? state.searchData.searchList = state.content.listData : state.searchData.searchList = [];\r\n\r\n            return {\r\n                ...state\r\n            }\r\n        case 'SEARCH_DATA':\r\n            \r\n            state.searchData.searchString = action.keywords;\r\n            state.searchData.searchList = state.content.listData;\r\n            if(action.keywords){\r\n                state.searchData.searchList = state.content.listData.filter((val) =>(val.name).toLowerCase().includes(action.keywords.toLowerCase()));\r\n            }\r\n\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default getListData;","import { combineReducers } from 'redux';\r\nimport getListData from \"./reducerGetListData\"; \r\n\r\nexport default combineReducers({\r\n    getListData\r\n})\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './redux/reducers/';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(rootReducer,\n  applyMiddleware(\n    thunkMiddleware,\n    loggerMiddleware\n  ))\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}